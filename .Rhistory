install.packages("mongolite")
library(mongolite)
connection_string <- "mongodb://localhost:27017"
trips_collection = mongo(collection="dashboard", db="dashboard", url=connection_string)
trips_collection$count()
install.packages("shiny")
library(shin)
library(shiny)
runExample("01_hello")
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello World"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
ui <- fluidPage(
# App title ----
titlePanel("Hello World"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
inyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
hist(x, breaks = bins, col = "orange", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "orange", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "orange", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
runApp("DASHBOARD_Muller")
source("C:/Projets/DASHBOARD_Muller/app.R")
runApp()
db = mongo(collection="dashboard", db="dashboard", url=connection_string)
rm(trips_collection)
stats <- db$aggregate(
'[{"$group":{"_id":"$is_eu", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
names(stats) <- c("is_eu", "count")
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$is_coronavirus_lower", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$date_accepted", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$country", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$Location_cities_country$author1$country", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$Location_cities_country.author1.country", "count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
View(stats)
stats <- db$aggregate(
'[{"$group":{"_id":"$Location_cities_country.author1.country",
"$group":{"_id":"$date_accepted",
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":{"_id":"$Location_cities_country.author1.country",
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":{"_id":{"$Location_cities_country.author1.country", "$date_accepted"}
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":{"_id":{"$Location_cities_country.author1.country", "$date_accepted"},
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":{"_id":{"$Location_cities_country.author1.country"},
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":{"_id":"$Location_cities_country.author1.country", "date_accepted",
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
'[{"$group":
{"_id": {"$Location_cities_country.author1.country", "$date_accepted"},
"count": {"$sum":1}}}]',
options = '{"allowDiskUse":true}'
)
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"Country": "$Location_cities_country.author1.country",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
}
]'
)
View(stats)
View(stats)
library(lubridate)
stats <- names(c("country", "date", "count"))
stats$date <- ymd(stats$date, tz = "UTC")
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"Country": "$Location_cities_country.author1.country",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
}
]'
)
stats <- names(c("country", "date", "count"))
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"Country": "$Location_cities_country.author1.country",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
}
]'
)
names(stats) <- c("country", "date", "count")
View(stats)
stats$date <- ymd(stats$`_id$date`, tz = "UTC")
stats <- ymd(stats$`_id$date`, tz = "UTC")
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"Country": "$Location_cities_country.author1.country",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
}
]'
)
stats$`_id$date` <- ymd(stats$`_id$date`, tz = "UTC")
View(stats)
stats$`_id$date` <- ymd(stats$`_id$date`, tz = "UTC")
new_names <- c("country", "date", "count")
names(stats) <- new_names
names(stats)
stats$_id
stats <- as.data.frame(stats)
View(stats)
names(stats)
rownames(stats)
stats[[2]]
stats[[1]]
View(stats)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"field1": "$Location_cities_countries",
"field2": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"country": "$_id.Country",
"field2": "$_id.date",
"count": 1
}
}
]'
)
View(stats)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"country": "$Location_cities_countries",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"country": "$_id.country",
"date": "$_id.date",
"count": 1
}
}
]'
)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"country": "$Location_cities_countries",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 1,
"country": "$_id.country",
"date": "$_id.date",
"count": 1
}
}
]'
)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"country": "$Location_cities_countries",
"date": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"country": "$_id.country",
"date": "$_id.date",
"count": 1
}
}
]'
)
View(stats)
# group_by date & country -> count ----------------------------------------
stats <- con$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"field1": "$Location_cities_country.author1.country",
"field2": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"field1": "$_id.field1",
"field2": "$_id.field2",
"count": 1
}
}
]'
)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"field1": "$Location_cities_country.author1.country",
"field2": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"field1": "$_id.field1",
"field2": "$_id.field2",
"count": 1
}
}
]'
)
View(stats)
# group_by date & country -> count ----------------------------------------
stats <- db$aggregate(
pipeline = '[
{
"$group": {
"_id": {
"field1": "$Location_cities_country.author1.country",
"field2": "$date_accepted"
},
"count": { "$sum": 1 }
}
},
{
"$project": {
"_id": 0,
"country": "$_id.field1",
"date": "$_id.field2",
"count": 1
}
}
]'
)
View(stats)
stats$date <- ymd(stats$date, tz = "UTC")
View(stats)
server <- function(input, output) {
# Filter the GDP data by the selected countries and time range
gdp_filtered <- stats %>%
filter(country %in% input$countries, date >= as.Date(input$date_range[1]), date <= as.Date(input$date_range[2]))
# Create a line plot of the GDP data over time
output$gdp_plot <- renderPlot({
ggplot(data = gdp_filtered, aes(x = date, y = gdp, color = country)) +
geom_line()
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# Input controls for selecting countries and time range
selectInput(
inputId = "countries",
label = "Countries",
choices = unique(stats$country),
multiple = TRUE
),
dateRangeInput(inputId = "date_range", label = "Date range"),
# Plot area for GDP data
plotOutput(outputId = "gdp_plot")
)
runApp()
library(tidyverse)
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
runApp()
class(stats$country)
runApp()
library(leaflet)
install.packages("leaflet")
runApp()
library(leaflet)
runApp()
install.packages("leaflet.extras")
library(leaflet.extras)
runApp()
